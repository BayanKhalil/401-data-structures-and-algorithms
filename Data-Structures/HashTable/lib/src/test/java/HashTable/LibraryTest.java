/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import java.util.HashMap;


import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {


    @Test
    public void add() {
        HashTable hashTable=new HashTable();
        hashTable.add("bayan","engineer");
        hashTable.add("aya","graphic design");
        assertTrue(hashTable.add("key","value ")
        );
    }

    @Test
    public void get() {
        HashTable hashTable=new HashTable();
        hashTable.add("bayan","engineer");
        hashTable.add("aya","graphic design");
        assertEquals("engineer", hashTable.get("bayan"));
    }

    @Test
    public void contains() {
        HashTable hashTable=new HashTable();
        hashTable.add("bayan","engineer");
        hashTable.add("aya","graphic design");
        assertTrue(hashTable.contains("bayan"));
    }
    @Test
    public void contains2() {
        HashTable hashTable=new HashTable();
        hashTable.add("bayan","engineer");
        hashTable.add("aya","graphic design");
        assertFalse(hashTable.contains("rana"));
    }

    @Test
    public void testHash() {
        HashTable hashTable=new HashTable();
        assertEquals(0, hashTable.hash("Hello")
        );
    }


    @Test public void collisionHandle() {
        HashTable hashTable = new HashTable();
        hashTable.add("bayan","engineer");
        hashTable.add("aya","graphic design");
        hashTable.add("tala","teacher");
        hashTable.add("rana","kids teacher");

        String expected ="HashTable{buckets=[[HashNode{key='aya', value='graphic design'}], null, [HashNode{key='bayan', value='engineer'}, HashNode{key='tala', value='teacher'}, HashNode{key='rana', value='kids teacher'}], null, null]}";

        assertEquals(expected, hashTable.toString());
    }

    @Test
    public void RepeatedWord1() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "it was the season of Darkness, it was the spring of hope, it was the winter of despair";
        String expected = "it";
        assertEquals(expected, test.repeatedWord(sentences));
    }

    @Test
    public void RepeatedWord2() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "";
        assertNull(  test.repeatedWord(sentences));
    }
    @Test
    public void RepeatedWord3() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "Hello world";
        assertNull(  test.repeatedWord(sentences));
    }

    public void intersectionTree1(){

    Node root1 = new Node(10,
            new Node(5),
            new Node(15));

    Node root2 = new Node(5,
            new Node(0), new Node(2));

    List<Integer> expected = new ArrayList();
        expected.add(5);

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }

    @Test
    public void intersectionTree2(){

        Node root1 = new Node(10,
                new Node(5, new Node(2), new Node(3)),
                new Node(8, new Node(0), new Node(19)));

        Node root2 = new Node(5,
                new Node(0), new Node(2));

        List<Integer> expected = new ArrayList();
        expected.add(5);
        expected.add(0);
        expected.add(2);

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }

    @Test
    public void intersectionTree3(){

        Node root1 = new Node(10,
                new Node(5), new Node(2));

        Node root2 = new Node(3,
                new Node(6), new Node(9));

        List<Integer> expected = new ArrayList();

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }
  
  
    @Test

    public void leftJoin1(){
        HashMap map1 = new HashMap();
        map1.put("bayan", "study");
        map1.put("aya", "eat");
        map1.put("rana", "sleep");
        map1.put("tala", "run");

        HashMap map2 = new HashMap();
        map2.put("esraa", "eat");
        map2.put("aya", "drink");
        map2.put("rana", "run");

        List<String> list = new ArrayList<>();
        list.add("tala: run, null");
        list.add("bayan: study, null");
        list.add("rana: sleep, run");
        list.add("aya: eat, drink");

        assertEquals(list,LeftJoin.leftJoin(map1, map2));
    }

    @Test
    public void leftJoin2(){
        HashMap map1 = new HashMap();
        map1.put("bayan", "study");
        map1.put("aya", "eat");
        map1.put("rana", "sleep");
        map1.put("tala", "run");

        HashMap map2 = new HashMap();


        List<String> list = new ArrayList<>();
        list.add("tala: run, null");
        list.add("bayan: study, null");
        list.add("rana: sleep, null");
        list.add("aya: eat, null");

        assertEquals(list ,  LeftJoin.leftJoin(map1, map2));

    }

    @Test
    public void leftJoin3(){
        HashMap map1 = new HashMap();
        HashMap map2 = new HashMap();

        List<String> list = new ArrayList<>();

        assertEquals(list ,  LeftJoin.leftJoin(map1, map2));

    }



}
