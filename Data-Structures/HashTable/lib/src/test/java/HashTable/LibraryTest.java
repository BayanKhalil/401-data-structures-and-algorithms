/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void RepeatedWord1() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "it was the season of Darkness, it was the spring of hope, it was the winter of despair";
        String expected = "it";
        assertEquals(expected, test.repeatedWord(sentences));
    }

    @Test
    public void RepeatedWord2() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "";
        assertNull(  test.repeatedWord(sentences));
    }
    @Test
    public void RepeatedWord3() {
        RepeatedWord test=new RepeatedWord();
        String sentences = "Hello world";
        assertNull(  test.repeatedWord(sentences));
    }


    @Test
    public void intersectionTree1(){

    Node root1 = new Node(10,
            new Node(5),
            new Node(15));

    Node root2 = new Node(5,
            new Node(0), new Node(2));

    List<Integer> expected = new ArrayList();
        expected.add(5);

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }

    @Test
    public void intersectionTree2(){

        Node root1 = new Node(10,
                new Node(5, new Node(2), new Node(3)),
                new Node(8, new Node(0), new Node(19)));

        Node root2 = new Node(5,
                new Node(0), new Node(2));

        List<Integer> expected = new ArrayList();
        expected.add(5);
        expected.add(0);
        expected.add(2);

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }

    @Test
    public void intersectionTree3(){

        Node root1 = new Node(10,
                new Node(5), new Node(2));

        Node root2 = new Node(3,
                new Node(6), new Node(9));

        List<Integer> expected = new ArrayList();

        assertEquals(expected,IntersectionTree.treeIntersection(root1, root2));
    }


}
